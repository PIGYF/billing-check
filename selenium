import tkinter as tk
from  tkinter import filedialog
import threading  # 导入多线程模块
from tkinter import ttk  #下拉选择框
import pandas as pd
import time
import os
import math
from selenium import webdriver
from selenium.webdriver.common.by import By

class GUI:

    def __init__(self):
        self.root = tk.Tk()
        self.root.title('Test')
        self.root.geometry("550x240+100+150")
        self.interface()       

    def interface(self):
        self.Button0 = tk.Button(self.root, text="Start",command=self.start)
        self.Button0.grid(row=1, column=3)
        
        self.Label0 = tk.Label(self.root, text="路径：")
        self.Label0.grid(row=1, column=0)
        
        self.entry00 = tk.StringVar()
        self.Entry0 = tk.Entry(self.root,textvariable=self.entry00,width=60)
        self.Entry0.grid(row=1, column=1,sticky = 'w')
        self.Button1 = tk.Button(self.root, text="Browse", command=self.selectPath_file)
        self.Button1.grid(row=1, column=2)
        
        self.w1 = tk.Text(self.root,width=50, height=10)
        self.w1.grid(row=3, column=1)
        
        self.Label1 = tk.Label(self.root, text = "工厂：")
        self.Label1.grid(row =2,column = 0)
        values = ['DCCC', 'DCCS','PTCN', 'RBAC', 'RBCD', 'RBCW']
        self.combobox = ttk.Combobox(
            master=self.root,  # 父容器
            height=10,  # 高度,下拉显示的条目数量
            width=8,  # 宽度
            state='normal',  # 设置状态 normal(可选可输入)、readonly(只可选)、 disabled(禁止输入选择)
            cursor='arrow',  # 鼠标移动时样式 arrow, circle, cross, plus...
            font=('', 10),  # 字体、字号
            textvariable='',  # 通过StringVar设置可改变的值
            values=values,  # 设置下拉框的选项
        )
        self.combobox.grid(row=2, column=1,sticky = 'w')
        
    def event(self):
        try:
            df = pd.read_excel(self.path,sheet_name = 'Billing templete',skip_rows = [0,5],header = 6)
        except:
            df = pd.read_excel(self.path,sheet_name = 'Billing template',skip_rows = [0,5],header = 6)

        df['Pick Up Date'] = pd.to_datetime(df['Pick Up Date'].dropna())
        df['ATA'] = pd.to_datetime(df['ATA'].dropna())
        try:
            df['Arrival Notice Submit Date'] = pd.to_datetime(df['Arrival Notice Submit Date'].dropna())
        except:
                df.rename(columns={'Arrive Notice submit Date':'Arrival Notice Submit Date'},inplace=True)
                df['Arrival Notice Submit Date'] = pd.to_datetime(df['Arrival Notice Submit Date'].dropna())
        try:
            df.rename(columns={' Require Service Level':'Require Service Level'},inplace=True)
        except:
            pass
            
        df['P/U Date'] = pd.to_datetime(df['P/U Date'].dropna())
        df['HAWB'] = df['HAWB'].astype(str)
        for i in range(len(df.index)):
            if df.loc[i,'Require Service Level'] in ['STD','Standrad']:
                df.loc[i,'Require Service Level'] = 'Standard'
            if df.loc[i,'LSP'] in ['DB','Schenker','DBSchenker']:
                df.loc[i,'LSP'] = 'DBS'
            if df.loc[i,'Require Service Level'] == 'Standard' and df.loc[i,'Place/Zone of Origin'] == 'Germany south (4-8)':
                df.loc[i,'Place/Zone of Origin'] = 'Germany south (6-9)'
            if df.loc[i,'LSP'] == 'DBS' and df.loc[i,'Origin Country [ISO country code]'] == 'CZ':
                df.loc[i,'Origin Port'] = 'PRG'
            
        self.w1.insert(1.0, time.strftime('['+'%H:%M:%S'+'] ') + '账单读取--成功\n')
        
        try:
            all_rate_card_path = r'\\bosch.com\dfsrb\DfsCN\loc\Sgh\RBCN\CP\LOG-AP\07_LOT_Overland\04_Operation\02_Execution\006_TMC Daily Track List\05_GR\Daily_POD_Report\employee\Carson\数据源-AE\Share point rate card template.xlsx'
            all_rate_card = pd.read_excel(all_rate_card_path,sheet_name ='all_rate',usecols = [0,1,2,5,6,10,11,13,15,17,18,19,21,22,27,30,33,34,36,48,51,54,55,57,58,80])
            all_rate_card = all_rate_card.loc[all_rate_card['Validity'] == ('Valid')]
            add_rate_card_path = r'\\bosch.com\dfsrb\DfsCN\loc\Sgh\RBCN\CP\LOG-AP\07_LOT_Overland\04_Operation\02_Execution\006_TMC Daily Track List\05_GR\Daily_POD_Report\employee\Carson\数据源-AE\Share point rate card template.xlsx'
            add_rate = pd.read_excel(add_rate_card_path,sheet_name ='Rate card')
            self.w1.insert(1.0,time.strftime('['+'%H:%M:%S'+'] ') + '价卡读取--成功\n')
        except:
            self.w1.insert(1.0,time.strftime('['+'%H:%M:%S'+'] ') + '价卡读取--失败\n')
            
        try:
            exchange_rate_path = r'\\bosch.com\dfsrb\DfsCN\loc\Sgh\RBCN\CP\LOG-AP\07_LOT_Overland\04_Operation\07_FCC\Operation\PS operation\Exchange rate.xlsx'
            exchange_rate = pd.read_excel(exchange_rate_path,sheet_name='Ex.CNY', index_col = 0)
            exchange_countries = pd.read_excel(exchange_rate_path,sheet_name='Countries', index_col = 0)
            currency_code = pd.read_excel(exchange_rate_path,sheet_name='Currency_code', index_col = 0)
            self.w1.insert(1.0,time.strftime('['+'%H:%M:%S'+'] ') + '汇率读取--成功\n')
        except:
            self.w1.insert(1.0,time.strftime('['+'%H:%M:%S'+'] ') + '汇率读取--失败\n')
         
        #RBCW货损报告
        def damage_report_file(df):
            search_path =r'\\bosch.com\dfsrb\DfsCN\loc\Sgh\RBCN\CP\LOG-AP\07_LOT_Overland\04_Operation\07_FCC\Operation\PS operation\06_RBCW 4Q&8D  report'
            names = os.listdir(search_path)
            new_names = []
            for name in names:
                if name[0:2] != '~$' and ".xlsx" in name:
                    new_names.append(name)
                
            for new_name in new_names:        
                damage_report_path = os.path.abspath(os.path.join(search_path, new_name))
                
            damage_report = pd.read_excel(damage_report_path,skip_rows = [0,1],header =2,usecols = [4,6,13])
            damage_report = damage_report[pd.isna(damage_report['Completion Date'])]
            damage_report['HAWB TO Number'] = damage_report['HAWB TO Number'].astype(str)

            df['HAWB'] = df['HAWB'].astype(str)
            df = pd.merge(df,damage_report,how ='left',left_on =['HAWB'],right_on=['HAWB TO Number'])
            df.drop(labels='HAWB TO Number',axis=1,inplace=True)
            return df
        
        if self.factory =='RBCW':
            df = damage_report_file(df)
            self.w1.insert(1.0,time.strftime('['+'%H:%M:%S'+'] ') + '匹配货损报告--成功\n')
        else:
            pass
        
        #FTS数据下载
        def fts_download():
            url = 'https://sgpftsn2.bosch.com.sg/Login/Login.aspx'
            username = 'HPI2SZH'
            password = 'Hupingping.3'
            options = webdriver.ChromeOptions()
            options.add_argument("download.default_directory=C:/Users/DHY1SZH/Desktop")

            driver = webdriver.Chrome(options=options)
            driver.get(url)
            driver.implicitly_wait(10) #隐式等待
            driver.find_element(By.XPATH,'//*[@id="Label15"]').click()
            driver.find_element(By.XPATH,'//*[@id="txtAccountName"]').send_keys(username)
            driver.find_element(By.XPATH,'//*[@id="txtPassword"]').send_keys(password)
            verifycode = input("请输入验证码： ")
            driver.find_element(By.XPATH,'//*[@id="txtVerifyCode"]').send_keys(verifycode)
            driver.find_element(By.XPATH,'//*[@id="btnLogin"]').click()
            time.sleep(1)
            
            
            #SITE 选择登录
            driver.find_element(By.XPATH,'//*[@id="ctl01"]/div[3]/div[2]/div/section/div[2]/div/div/div[1]/span').click()
            #RBAC = driver.find_element(By.XPATH,'//*[@id="ctl01"]/div[5]/div/ul/li[23]').click()
            #DCCC = driver.find_element(By.XPATH,'//*[@id="ctl01"]/div[5]/div/ul/li[49]').click()
            #DCCS = driver.find_element(By.XPATH,'//*[@id="ctl01"]/div[5]/div/ul/li[50]').click()
            RBCD = driver.find_element(By.XPATH,'//*[@id="ctl01"]/div[5]/div/ul/li[58]').click()
            #RBCW = driver.find_element(By.XPATH,'//*[@id="ctl01"]/div[5]/div/ul/li[60]').click()
            #PTCN = driver.find_element(By.XPATH,'//*[@id="ctl01"]/div[5]/div/ul/li[62]').click()
            driver.find_element(By.XPATH,'//*[@id="btnLogin"]').click()
            
            
            test_hawb = df['HAWB']
            
            driver.find_element(By.XPATH,'//*[@id="ctm-header"]/div[3]/div/nav/ul/li[3]/a').click() #DCCS跟踪表
            driver.switch_to.frame('main-iframe')
            hawb_label1 = driver.find_element(By.XPATH,'//*[@id="ASPxPageControl1_txtBlId"]')
            hawb_label1.click()
            for i in test_hawb:
                hawb_label1.send_keys( i +'\n') #分运单号
            driver.find_element(By.XPATH,'//*[@id="ASPxPageControl1_btnSearch"]').click() #查询按钮
            driver.find_element(By.XPATH,'//*[@id="ASPxPageControl1_btnExport"]').click() #导出按钮
            name1 = 'Tracking_Report_' + time.strftime('%Y%m%d%H%M')
            driver.switch_to.default_content()#方法，就可以回退到主层
            
            driver.find_element(By.XPATH,'//*[@id="ctm-header"]/div[3]/div/nav/ul/li[6]/a').click() #货运信息
            driver.switch_to.frame('main-iframe')
            hawb_label2 = driver.find_element(By.XPATH,'//*[@id="tabShipment_ShipmentList1_txtBlId"]')
            hawb_label2.click()
            for i in test_hawb:
                hawb_label2.send_keys( i +'\n') #分运单号
            driver.find_element(By.XPATH,'//*[@id="tabShipment_ShipmentList1_ddlOperatorUser_I"]').clear()#操作用户
            driver.find_element(By.XPATH,'//*[@id="tabShipment_ShipmentList1_ddlTrackingOperator_I"]').clear()#跟单员
            driver.find_element(By.XPATH,'//*[@id="tabShipment_ShipmentList1_btnSearch"]').click() #查询按钮
            driver.find_element(By.XPATH,'//*[@id="tabShipment_ShipmentList1_btnExportHeader"]').click() #导出按钮
            name2 ='Shipment_Export_' + time.strftime('%Y%m%d%H%M')
            print(name2)
            
                
            
            user_name = os.getlogin()
            fts_report_path =r'C:/Users/%s/Downloads' % (user_name)
            names = os.listdir(fts_report_path)
            for name in names:
                if name1 in name and ".xlsx" in name:
                    tracking_report_path = os.path.abspath(os.path.join(fts_report_path, name))
        
            
        
        #FTS数据和账单合并
        def fts_merge(df,fts):
            df = pd.merge(df,fts,how ='left',left_on = 'HAWB',right_on = '分运单号')
            df.drop('分运单号',axis=1, inplace = True) 
            return df

        def replace_country_currency(df):
            for i in range(len(df['分运单号'])):
                try:
                    df.loc[i,'启/抵运国(地区)'] = exchange_countries.loc[df['启/抵运国(地区)'][i],'缩写']
                except:
                    df.loc[i,'启/抵运国(地区)'] = False
                try:

                    df.loc[i,'运费币制']= currency_code.loc[df['运费币制'][i],'Currency']
                except:
                    df.loc[i,'运费币制'] = False      

            return df
        
        try:
            if self.factory == 'DCCS':
                df_tracking_report = pd.read_excel(self.tracking_report_path,usecols = [4,11,13,37,47,51,52,55])
            elif self.factory == 'RBAC':
                df_tracking_report = pd.read_excel(self.tracking_report_path,usecols = [4,11,13,37,49,57,60])
            elif self.factory == 'PTCN':
                df_tracking_report = pd.read_excel(self.tracking_report_path,usecols = [4,11,13,37,49,57,59])
            elif self.factory == 'RBCD':
                df_tracking_report = pd.read_excel(self.tracking_report_path,usecols = [4,11,13,37,45,51,55])        
            elif self.factory == 'RBCW':
                df_tracking_report = pd.read_excel(self.tracking_report_path,usecols = [4,11,13,37])  
            else:
                #DCCC
                df_tracking_report = pd.read_excel(self.tracking_report_path,usecols = [4,11,13,37,50,57,60,62])

            df_tracking_report['分运单号'] = df_tracking_report['分运单号'].astype(str)    
            df_shipment_export = pd.read_excel(self.shipment_report_path,usecols = [2,9,44,46])
            df_shipment_export['分运单号'] = df_shipment_export['分运单号'].astype(str)
            replace_country_currency(df_shipment_export)

            df = fts_merge(df,df_tracking_report)
            df = fts_merge(df,df_shipment_export)
            self.w1.insert(1.0,time.strftime('['+'%H:%M:%S'+'] ') + '匹配FTS日志--成功\n')
        except:
            self.w1.insert(1.0,time.strftime('['+'%H:%M:%S'+'] ') + '匹配FTS日志--失败\n')
        
        #价卡清洗
        def rate_card_cleaning(rate_card):
            pvg_rate = rate_card[(rate_card['LSP offered Airport of Destination  [3-digit port code] or Airport Gr'] =='PVG') & (rate_card['Place/Zone of Destination'] !='(blank)') & (rate_card['Place/Zone of Destination'].str[:8] !='Shanghai')]
            rate_card.drop(index = pvg_rate.index,inplace = True)
            return rate_card

        rate_card_cleaning(all_rate_card)
        rate_card_cleaning(add_rate)
        
        #账单合并价卡
        def merge_billing():
            df_merge = pd.merge(df,all_rate_card,how ='left',
                                left_on = ['LSP','Mode of Transport','Require Service Level','Origin Country [ISO country code]','Place/Zone of Origin','Origin Port','Destination Port'],
                                right_on = ['Contract Partner','Transportation Mode','Type of service','Origin Country [ISO country code]','Place/Zone of Origin','LSP offered Airport of Loading  [3-digit port code] or Airport Grouping','LSP offered Airport of Destination  [3-digit port code] or Airport Gr']
                                )
            return df_merge
        try:
            df_merge = merge_billing()
            self.w1.insert(1.0,time.strftime('['+'%H:%M:%S'+'] ') + '价卡匹配--成功\n')
        except:
            self.w1.insert(1.0,time.strftime('['+'%H:%M:%S'+'] ') + '价卡匹配--失败\n')
            
        def billing_check():
            try:
                #计费重
                CW_index = df_merge.columns.get_loc('计费重量')
                df_merge.insert(loc = CW_index + 1, column = '计费重', value = None)
                for i in range(0,len(df_merge.index)):
                    if df_merge.loc[i,'Require Service Level'] == 'Standard':
                        df_merge.loc[i,'计费重']= max(30,df_merge.loc[i,'Gross Weight\n(KG)'],df_merge.loc[i,'Total Volume\n(CBM)']*125)
                    else:
                        df_merge.loc[i,'计费重']= max(30,df_merge.loc[i,'Gross Weight\n(KG)'],df_merge.loc[i,'Total Volume\n(CBM)']*167)            
                df_merge['计费重'] = df_merge['计费重'].apply(lambda x:math.ceil(x) if round(x) == math.ceil(x) else round(x) + 0.5)
            except:
                pass
            
            try:
            #Xfee
                xfee_index = df_merge.columns.get_loc('Other charges X-ray [per kg actual weight]')
                df_merge.insert(loc = xfee_index + 1, column = 'X fee', value = None)
                for i in range(0,len(df_merge.index)):
                    if df_merge.loc[i,'X-ray fee\n(EUR)']!= 0:
                        if pd.isna(df_merge.loc[i,'Other charges X-ray [per kg actual weight]']) is False:
                            if (pd.isna(df_merge.loc[i,'Xray Minimum [per HAWB]']) is False) and (pd.isna(df_merge.loc[i,'Xray Maximum [per HAWB]']) is False):
                                df_merge.loc[i,'X fee'] = min(max(df_merge.loc[i,'Xray Minimum [per HAWB]'],df_merge.loc[i,'Other charges X-ray [per kg actual weight]'] * df_merge.loc[i,'Gross Weight\n(KG)']),df_merge.loc[i,'Xray Maximum [per HAWB]'])
                            elif (pd.isna(df_merge.loc[i,'Xray Minimum [per HAWB]']) is False) and (pd.isna(df_merge.loc[i,'Xray Maximum [per HAWB]']) is True):
                                df_merge.loc[i,'X fee'] = max(df_merge.loc[i,'Xray Minimum [per HAWB]'],df_merge.loc[i,'Other charges X-ray [per kg actual weight]'] * df_merge.loc[i,'Gross Weight\n(KG)'])
                            else:
                                df_merge.loc[i,'X fee']= df_merge.loc[i,'Other charges X-ray [per kg actual weight]'] * df_merge.loc[i,'Gross Weight\n(KG)']                
                        else:                
                            df_merge.loc[i,'X fee'] = False
                    else:
                        df_merge.loc[i,'X fee'] = 0
                        df_merge.loc[i,'Other charges X-ray [per kg actual weight]'] = None
            except:
                pass

            try:
                #Storage fee    
                #其他货代用P/U Date - ATA
                storage_index = df_merge.columns.get_loc('Other charges-Storage fee airport destination after free days')
                df_merge.insert(loc = storage_index + 1, column = 'Storage fee', value = None)
                for i in range(0,len(df_merge.index)):
                    #DBS、Cosco 用 P/U Date - 到货通知日
                    #CEVA 分RBCW和RBAC/PTCN用到通日计算
                    if df_merge.loc[i,'LSP'] in ['DBS','COSCO']:
                        storage_days = (df_merge.loc[i,'P/U Date']-df_merge.loc[i,'Arrival Notice Submit Date']).days + 1 - df_merge.loc[i,'Free Days of storage at destination']
                    elif df_merge.loc[i,'LSP'] == 'CEVA' and self.factory in ['RBAC','PTCN','RBCW']:
                        storage_days = (df_merge.loc[i,'P/U Date']-df_merge.loc[i,'Arrival Notice Submit Date']).days + 1 - df_merge.loc[i,'Free Days of storage at destination']
                    else:
                        storage_days = (df_merge.loc[i,'P/U Date']-df_merge.loc[i,'ATA']).days + 1 - df_merge.loc[i,'Free Days of storage at destination']
                

                    if df_merge.loc[i,'Storage Rate\n(CNY)'] != 0:
                        if pd.isna(df_merge.loc[i,'Free Days of storage at destination']) is False:
                            if storage_days > 0 and df_merge.loc[i,'Origin Country [ISO country code]'] != 'IN':
                                df_merge.loc[i,'Storage fee'] = storage_days * df_merge.loc[i,'Other charges-Storage fee airport destination after free days'] * df_merge.loc[i,'C. W/M  (KG/CBM)']
                            elif storage_days > 0 and df_merge.loc[i,'Origin Country [ISO country code]'] == 'IN':
                                df_merge.loc[i,'Storage fee'] = storage_days * df_merge.loc[i,'Other charges-Storage fee airport destination after free days'] * df_merge.loc[i,'C. W/M  (KG/CBM)'] * df_merge.loc[i,'Ex.\nMain']
                            else:
                                df_merge.loc[i,'Storage fee'] = 0
                        else:
                            df_merge.loc[i,'Free Days of storage at destination'] =  False
                            df_merge.loc[i,'Other charges-Storage fee airport destination after free days'] =  False
                    else:
                        df_merge.loc[i,'Storage fee'] = 0
            except:
                pass
            
            try:
                #Main careiage rate、add lead time
                TF_index = df_merge.columns.get_loc('Main Carriage rate ')
                df_merge.insert(loc = TF_index + 1, column = 'TF Rate', value = None)
                LT_index = df_merge.columns.get_loc('Door to port LT')
                df_merge.insert(loc = LT_index + 1, column = 'add lead time', value = None)
                for i in range(len(df_merge.index)):
                    tf_rate = add_rate[(add_rate['LSP'] == df_merge.loc[i,'LSP']) & 
                                         (add_rate['Origin Country [ISO country code]'] == df_merge.loc[i,'Origin Country [ISO country code]']) &
                                         (add_rate[' Place/Zone of Origin'] == df_merge.loc[i,'Place/Zone of Origin']) &
                                         #(add_rate['LSP offered Airport of Loading  [3-digit port code] or Airport Grouping'] == df_merge.loc[i,'Origin Port']) &
                                         (add_rate['LSP offered Airport of Destination  [3-digit port code] or Airport Gr'] == df_merge.loc[i,'Destination Port']) &
                                         (add_rate['End date'] >= df_merge.loc[i,'Pick Up Date']) &
                                         (add_rate['Start date'] <= df_merge.loc[i,'Pick Up Date'])
                                          ]
                    try:
                        df_merge.loc[i,'TF Rate'] = tf_rate['TF rate'].tolist()[0]
                        df_merge.loc[i,'add lead time'] = tf_rate['Adder Lead time in days [ATA]'].tolist()[0]
                    except:
                        df_merge.loc[i,'TF Rate'] = False
                        df_merge.loc[i,'add lead time'] = False
            except:
                pass
            
            
            try:
                #origin exchange rate
                #main exchange rate IN用USD, 其他用main carriage rate
                #FTS 申报金额
                df_merge.insert(loc = LT_index + 2, column = 'Ex.Origin', value = None)
                df_merge.insert(loc = LT_index + 3, column = 'Ex.Main', value = None)
                df_merge.insert(loc = LT_index + 4, column = 'FTS-CNY', value = None)

                exchange_month = pd.to_datetime(df_merge['Pick Up Date'].dropna()).apply(lambda x:x.strftime('%Y/%m'))
                for i in range(len(df_merge.index)):
                    try:
                        exchange_origin = exchange_rate.loc[df_merge['Currency'][i],exchange_month[i]]
                        df_merge.loc[i,'Ex.Origin'] = exchange_origin
                        if df_merge.loc[i,'Origin Country [ISO country code]'] == 'IN':
                            exchange_main = exchange_rate.loc['USD',exchange_month[i]]
                        else:
                            exchange_main = exchange_rate.loc[df_merge['Currency_7'][i],exchange_month[i]]
                        df_merge.loc[i,'Ex.Main'] = exchange_main

                    except:
                        df_merge.loc[i,'Ex.Origin'] = False
                        df_merge.loc[i,'Ex.Main'] = False
                    try:    
                        declare_currency = exchange_rate.loc[df_merge['运费币制'][i],exchange_month[i]]
                        df_merge.loc[i,'FTS-CNY'] = declare_currency *df_merge['代理运费金额'][i]
                    except:
                        df_merge.loc[i,'FTS-CNY'] = False
            except:
                pass
            
            
            return df_merge
             
        #核对
        def compare(a,b):            
            try:
                c = b +'_核对'
                df_merge.insert(loc = (df_merge.columns.get_loc(b)) + 1, column = c, value = None)
                for i in range(len(df_merge.index)):
                    if df_merge.loc[i,a] == df_merge.loc[i,b]:
                        df_merge.loc[i,c] = None
                    else:
                        df_merge.loc[i,c] = False

                self.w1.insert(1.0,time.strftime('['+'%H:%M:%S'+'] ') + b +'--核对完成\n')
                
            except:
                self.w1.insert(1.0,time.strftime('['+'%H:%M:%S'+'] ') +b +'--核对失败\n')
            return df_merge

        try:
            df_merge = billing_check()
            self.w1.insert(1.0,time.strftime('['+'%H:%M:%S'+'] ') + '数据匹配--成功\n')
        except:
            self.w1.insert(1.0,time.strftime('['+'%H:%M:%S'+'] ') + '数据匹配--失败\n')    

        compare('计费重','C. W/M  (KG/CBM)')  
        compare('Incoterms','贸易术语')
        compare('Origin Country [ISO country code]','启/抵运国(地区)')

        compare('Pre-carriage Charge Rate','Pre-Carriage Rate')
        compare('Origin Terminal Handling Charge','Airport Origin Charge')
        compare('Destination Terminal Handling Charge/ rate(CNY)','Airport of Destination Charge') 
        compare('Ex.\nOrigin','Ex.Origin')
        compare('Ex.\nMain','Ex.Main')
        compare('X-ray fee\n(EUR)','X fee')
        compare('Main Carriage Rate(inc.main + BAF)','TF Rate')
        compare('Storage Rate\n(CNY)','Storage fee')


        save_path = os.path.dirname(self.path) +'/核对_'+ self.path.split('/')[-1]
        df_merge.to_excel(save_path)
        self.w1.insert(1.0,time.strftime('['+'%H:%M:%S'+'] ') + '账单核对完成\n')
     
    #输入文件路径
    def selectPath_file(self):
        self.path = filedialog.askopenfilename(filetypes=[("数据表",[".xls", ".xlsx"])])
        self.entry00.set(self.path)
    
    def start(self):
        self.w1.delete("1.0", "end")
        self.factory = self.combobox.get()
        self.w1.insert(1.0, '已选择--%s\n' % (str(self.factory)))
        self.T = threading.Thread(target=self.event)  # 多线程
        self.T.setDaemon(True)  # 线程守护，即主进程结束后，此线程也结束。否则主进程结束子进程不结束
        self.T.start()  # 启动
        


if __name__ == '__main__':
    a = GUI()
    a.root.mainloop()
